// --- Import Th∆∞ Vi·ªán v√† Module Ch√≠nh ---
import { NestFactory } from '@nestjs/core';
import * as cookieParser from 'cookie-parser';
import { AppModule } from './app.module';
// --- Import C·∫•u H√¨nh ·ª®ng D·ª•ng ---
import { HttpExceptionFilter } from './common/filters/http-exception.filter';
import { MulterExceptionFilter } from './common/filters/multer-exception.filter';
import { ResponseInterceptor } from './common/interceptors/response.interceptor';
import { validateEnv } from './configs/check-env.config';
import { connectToDatabase } from './configs/database.config';

// --- H√†m Kh·ªüi ƒê·ªông ·ª®ng D·ª•ng ---
async function bootstrap() {
  // Ghi log b·∫Øt ƒë·∫ßu qu√° tr√¨nh kh·ªüi t·∫°o
  console.log('ƒêang kh·ªüi t·∫°o ·ª©ng d·ª•ng...');

  // G·ªçi h√†m ki·ªÉm tra bi·∫øn m√¥i tr∆∞·ªùng b·∫Øt bu·ªôc
  validateEnv();

  // --- K·∫øt N·ªëi C∆° S·ªü D·ªØ Li·ªáu ---
  await connectToDatabase();

  // Kh·ªüi t·∫°o NestJS app v·ªõi module g·ªëc
  const app = await NestFactory.create(AppModule);

  // ƒêƒÉng k√Ω middleware cookie-parser ƒë·ªÉ c√≥ th·ªÉ ƒë·ªçc refreshToken t·ª´ HttpOnly Cookie
  app.use(cookieParser());

  // B·∫≠t CORS ƒë·ªÉ cho ph√©p frontend t·ª´ origin ƒë∆∞·ª£c ch·ªâ ƒë·ªãnh truy c·∫≠p t√†i nguy√™n c·ªßa backend
  app.enableCors({
    // origin: ['http://localhost:3232'],
    origin: [
      'https://test-bsim.vercel.app',
      'http://test-bsim.vercel.app',
      'https://test-bsim-git-main-mia-9xs-projects.vercel.app',
      'https://test-bsim-67l0jz6ak-mia-9xs-projects.vercel.app',
      'https://btestsim.netlify.app',
    ],
    methods: ['GET', 'POST', 'DELETE', 'PATCH'],
    allowedHeaders: ['Content-Type', 'Authorization'],
    credentials: true,
  });

  // Thi·∫øt l·∫≠p ti·ªÅn t·ªë "/api" cho to√†n b·ªô route, gi√∫p t·ªï ch·ª©c endpoint r√µ r√†ng h∆°n
  app.setGlobalPrefix('api');

  // ƒêƒÉng k√Ω interceptor to√†n c·ª•c ƒë·ªÉ chu·∫©n h√≥a response
  app.useGlobalInterceptors(new ResponseInterceptor());

  // ƒêƒÉng k√Ω filter to√†n c·ª•c ƒë·ªÉ chu·∫©n h√≥a l·ªói
  app.useGlobalFilters(new HttpExceptionFilter());

  // ƒêƒÉng k√Ω filter cho l·ªói Multer
  app.useGlobalFilters(new MulterExceptionFilter());

  // ƒê·ªçc bi·∫øn m√¥i tr∆∞·ªùng PORT
  const port = process.env.PORT;

  // N·∫øu kh√¥ng c√≥ PORT, log l·ªói v√† tho√°t
  if (!port) {
    console.error(
      `[NEST] [${new Date().toLocaleString()}] ‚ùå Thi·∫øu bi·∫øn m√¥i tr∆∞·ªùng PORT. Vui l√≤ng c·∫•u h√¨nh tr∆∞·ªõc khi kh·ªüi ƒë·ªông ·ª©ng d·ª•ng.`,
    );
    process.exit(1);
  } else {
    console.log(
      `[NEST] [${new Date().toLocaleString()}] ‚úÖ Bi·∫øn m√¥i tr∆∞·ªùng PORT ƒë√£ ƒë∆∞·ª£c c·∫•u h√¨nh: ${port}`,
    );
  }

  // L·∫Øng nghe c·ªïng ƒë√£ c·∫•u h√¨nh
  await app.listen(port);

  // Ghi log khi ·ª©ng d·ª•ng ƒë√£ s·∫µn s√†ng
  console.log(
    `[NEST] [${new Date().toLocaleString()}] üöÄ ·ª®ng d·ª•ng Web B√°n Sim ƒë√£ kh·ªüi ƒë·ªông th√†nh c√¥ng t·∫°i: http://localhost:${port}`,
  );
}
// --- G·ªçi H√†m Kh·ªüi ƒê·ªông ·ª®ng D·ª•ng ---
void bootstrap();
